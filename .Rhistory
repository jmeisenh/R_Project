}
}
tempDF['BMI'] <- modeledDF['BMI'] * 1.2
tempDF['BMI'] <- modeledDF['BMI'] * 1.2
tempDF['BMI'] <- modeledDF['BMI'] * 2
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] *j
predictValues <- predict(le.train.FAIC, tempDF, interval = 'prediction')
}
}
View(graphDF)
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
tempDF[oldColName] <- modeledDF[oldColName] * j
newValues <- modeledDF[oldColName] * j
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
}
graphDF <- data.frame()
}
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
}
#graphDF <- data.frame()
}
rbind('nudge' = j, oldColName = tempDF[oldColName])
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
graphDF <- rbind('Nudge' = j, oldColName = tempDF[oldColame], 'prediction' = predictValues[,1])
}
#graphDF <- data.frame()
}
View(graphDF)
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
graphDF <- rbind(j,tempDF[oldColame], predictValues[,1])
}
#graphDF <- data.frame()
}
data.frame(Nudge = rep(j, nrow(modeledDF)))
data.frame(oldColName = rep(j, nrow(modeledDF)))
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(rep(j, nrow(modeledDF)),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
graphDF <- data.frame()
}
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(rep(j, nrow(modeledDF)),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
}
View(graphDF)
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(rep(j, nrow(modeledDF)),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
colnames(graphDF) <-  c('Nudge', oldColName, 'Predicted')
}
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(rep(j, nrow(modeledDF)),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
colnames(graphDF) <-  c('Nudge', oldColName, 'Predicted')
g <- ggplot(graphDF, aes(x = graphDF[,2], y = graphDF[,3], color = Nudge))
g + geom_smooth()
}
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(rep(j, nrow(modeledDF)),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
colnames(graphDF) <-  c('Nudge', oldColName, 'Predicted')
g <- ggplot(graphDF, aes(x = graphDF[,2], y = graphDF[,3], color = Nudge))
g + geom_smooth()
graphDF <- data.frame()
}
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(rep(j, nrow(modeledDF)),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
colnames(graphDF) <-  c('Nudge', oldColName, 'Predicted')
g <- ggplot(graphDF, aes(x = graphDF[,2], y = graphDF[,3], color = Nudge))
g + geom_smooth()
show()
graphDF <- data.frame()
}
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(rep(j, nrow(modeledDF)),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
colnames(graphDF) <-  c('Nudge', oldColName, 'Predicted')
g <- ggplot(graphDF, aes(x = graphDF[,2], y = graphDF[,3], color = Nudge))
g + geom_smooth()
show(g + geom_smooth())
graphDF <- data.frame()
}
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(rep(j, nrow(modeledDF)),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
colnames(graphDF) <-  c('Nudge', oldColName, 'Predicted')
g <- ggplot(graphDF, aes(x = graphDF[,2], y = graphDF[,3], color = Nudge))
g + geom_point()
show(g + geom_smooth())
graphDF <- data.frame()
tempDF <- modeledDF
}
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(rep(j, nrow(modeledDF)),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
colnames(graphDF) <-  c('Nudge', oldColName, 'Predicted')
g <- ggplot(graphDF, aes(x = graphDF[,2], y = graphDF[,3], color = Nudge))
g + geom_point()
show(g + geom_point())
graphDF <- data.frame()
tempDF <- modeledDF
}
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(rep(j, nrow(modeledDF)),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
colnames(graphDF) <-  c('Nudge', oldColName, 'Predicted')
g <- ggplot(graphDF, aes(x = graphDF[,2], y = graphDF[,3], color = Nudge))
g <- g + geom_point() + ggtitle(paste0(oldColName, 'vs. Life Expectancy'))
g <- g + labs(x = oldColName, y = 'Life Expectancy')
show(g)
graphDF <- data.frame()
tempDF <- modeledDF
}
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(rep(j, nrow(modeledDF)),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
colnames(graphDF) <-  c('Nudge', oldColName, 'Predicted')
g <- ggplot(graphDF, aes(x = graphDF[,2], y = graphDF[,3]))
g <- g + geom_smooth(aes(color = Nudge)) + ggtitle(paste0(oldColName, 'vs. Life Expectancy'))
g <- g + labs(x = oldColName, y = 'Life Expectancy')
show(g)
graphDF <- data.frame()
tempDF <- modeledDF
}
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(rep(j, nrow(modeledDF)),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
colnames(graphDF) <-  c('Nudge', oldColName, 'Predicted')
g <- ggplot(graphDF, aes(x = graphDF[,2], y = graphDF[,3], colour = graphDF[,1]))
g <- g + geom_smooth() + ggtitle(paste0(oldColName, 'vs. Life Expectancy'))
g <- g + labs(x = oldColName, y = 'Life Expectancy')
show(g)
graphDF <- data.frame()
tempDF <- modeledDF
}
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(rep(j, nrow(modeledDF)),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
colnames(graphDF) <-  c('Nudge', oldColName, 'Predicted')
g <- ggplot(graphDF, aes(x = graphDF[,2], y = graphDF[,3], colour = graphDF[,1]))
g <- g + geom_smooth(se = FALSE) + ggtitle(paste0(oldColName, ' vs. Life Expectancy'))
g <- g + labs(x = oldColName, y = 'Life Expectancy')
show(g)
graphDF <- data.frame()
tempDF <- modeledDF
}
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(rep(j, nrow(modeledDF)),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
colnames(graphDF) <-  c('Nudge', oldColName, 'Predicted')
g <- ggplot(graphDF, aes(x = graphDF[,2], y = graphDF[,3], colour = graphDF[,1])) + geom_point()
g <- g + geom_smooth(se = FALSE) + ggtitle(paste0(oldColName, ' vs. Life Expectancy'))
g <- g + labs(x = oldColName, y = 'Life Expectancy')
show(g)
graphDF <- data.frame()
tempDF <- modeledDF
}
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(as.factor(rep(j, nrow(modeledDF))),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
colnames(graphDF) <-  c('Nudge', oldColName, 'Predicted')
g <- ggplot(graphDF, aes(x = graphDF[,2], y = graphDF[,3], colour = graphDF[,1])) + geom_point()
g <- g + geom_smooth(se = FALSE) + ggtitle(paste0(oldColName, ' vs. Life Expectancy'))
g <- g + labs(x = oldColName, y = 'Life Expectancy')
show(g)
graphDF <- data.frame()
tempDF <- modeledDF
}
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
#colnames(graphDF) <- c('Nudge', oldColName, 'Predicted')
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(as.factor(rep(j, nrow(modeledDF))),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
colnames(graphDF) <-  c('Nudge', oldColName, 'Predicted')
g <- ggplot(graphDF, aes(x = graphDF[,2], y = graphDF[,3], colour = graphDF[,1]))
g <- g + geom_smooth(se = FALSE) + ggtitle(paste0(oldColName, ' vs. Life Expectancy'))
g <- g + labs(x = oldColName, y = 'Life Expectancy')
show(g)
graphDF <- data.frame()
tempDF <- modeledDF
}
summary(tempdf['BMI'])
summary(tempDF['BMI'])
summary(tempDF['BMI'])[1]
summary(tempDF['BMI'])$values
summary(tempDF['BMI'])
summary(tempDF['BMI'])[2]
as.numeric(gsub("([0-9]+).*$", "\\1", summary(tempDF['BMI'])[2]))
as.numeric(gsub("([0-9]+)", , summary(tempDF['BMI'])[2]))
as.numeric(gsub("([0-9])", , summary(tempDF['BMI'])[2]))
as.numeric(gsub(".*?([0-9]+).*" , summary(tempDF['BMI'])[2]))
as.numeric(gsub(".*?([0-9]+).*" ,"\\1", summary(tempDF['BMI'])[2]))
quantile(tempDF['BMI'], probs = .25)
quantile(tempDF['BMI'], probs = C(.25))
summary(tempDF['BMI'])[2]
stri_sub(summary(tempDF['BMI'])[2], -6)
library(stringi)
stri_sub(summary(tempDF['BMI'])[2], -6)
as.numeric(stri_sub(summary(tempDF['BMI'])[2], -6))
as.numeric(stri_sub(summary(tempDF['BMI'])[4], -6))
as.numeric(stri_sub(summary(tempDF['BMI'])[4], -7))
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
xmin <-
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(as.factor(rep(j, nrow(modeledDF))),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
colnames(graphDF) <-  c('Nudge', oldColName, 'Predicted')
g <- ggplot(graphDF, aes(x = graphDF[,2], y = graphDF[,3], colour = graphDF[,1]))
g <- g + geom_smooth(se = FALSE) + ggtitle(paste0(oldColName, ' vs. Life Expectancy'))
g <- g + labs(x = oldColName, y = 'Life Expectancy') + coord_cartesian(xlim =  c(quantile(tempDF[oldColName], .25), quantile(tempDF[oldColName], .75)))
show(g)
graphDF <- data.frame()
tempDF <- modeledDF
}
quantile(tempDF['BMI'], .25)
quantile(sorted(tempDF['BMI']), .25)
quantile(sort(tempDF['BMI']), .25)
quantile(order(tempDF['BMI']), .25)
quantile(tempDF['BMI'], .25)
quantile(as.vector(tempDF['BMI']), .25)
as.vector(tempDF['BMI'])
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
xmin <-
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(as.factor(rep(j, nrow(modeledDF))),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
colnames(graphDF) <-  c('Nudge', oldColName, 'Predicted')
g <- ggplot(graphDF, aes(x = graphDF[,2], y = graphDF[,3], colour = graphDF[,1]))
g <- g + geom_smooth(se = FALSE) + ggtitle(paste0(oldColName, ' vs. Life Expectancy'))
g <- g + labs(x = oldColName, y = 'Life Expectancy') + coord_cartesian(xlim =  c(quantile(tempDF[,oldColName], .25), quantile(tempDF[,oldColName], .75)))
show(g)
graphDF <- data.frame()
tempDF <- modeledDF
}
tempDF <- modeledDF
graphDF <- data.frame()
for (i in 3:ncol(modeledDF)){
graphname <- paste0(oldColName, '_Graph')
oldColName <- colnames(modeledDF)[i]
xmin <-
for (j in c(.5, .7, .9, 1, 1.1, 1.5, 2, 3)){
newValues <- modeledDF[oldColName] * j
tempDF[oldColName] <- modeledDF[oldColName] * j
predictValues <- predict(le.train.FAIC, modeledDF, interval = 'prediction')
jFrame <- data.frame(as.factor(rep(j, nrow(modeledDF))),
tempDF[oldColName],
predictValues[,1])
graphDF <- rbind(graphDF, jFrame)
}
colnames(graphDF) <-  c('Nudge', oldColName, 'Predicted')
g <- ggplot(graphDF, aes(x = graphDF[,2], y = graphDF[,3], colour = graphDF[,1]))
g <- g + geom_smooth(se = FALSE) + ggtitle(paste0(oldColName, ' vs. Life Expectancy'))
g <- g + labs(x = oldColName, y = 'Life Expectancy') + coord_cartesian(xlim =  c(quantile(modeledDF[,oldColName], .25), quantile(modeledDF[,oldColName], .75)))
show(g)
graphDF <- data.frame()
tempDF <- modeledDF
}
